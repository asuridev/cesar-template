apply plugin: 'idea'

artifactoryPublish.skip = true

allprojects {
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    // After the project has been evaluated (and the dependency above has been added, apply the SonarQube plugin
    afterEvaluate { project ->
        if (project.getParent() == null && !project.plugins.hasPlugin('org.sonarqube')) {
            //Add sonar plugin only to root projects, and only if it is not already applied
            project.apply plugin: 'org.sonarqube'
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'java-library'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'maven-publish'

    group = "co.com.asuarezr.cesar-template"
    version = "${version}"
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    test {
        useJUnitPlatform()
    }
    dependencies {
        implementation "org.springframework.boot:spring-boot-starter-webflux:${spring_boot_version}"
        implementation "org.springframework.boot:spring-boot-starter-validation:${spring_boot_version}"
        implementation "org.springframework.boot:spring-boot-starter-aop:${spring_boot_version}"
        implementation "org.apache.logging.log4j:log4j-core:${log4j_api_version}"
        implementation "org.apache.logging.log4j:log4j-api:${log4j_api_version}"
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        implementation platform("org.springframework.boot:spring-boot-dependencies:${spring_boot_version}")
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'io.projectreactor:reactor-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }

    tasks.withType(Test).configureEach {
        if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_13)) {
            jvmArgs += [
                    "-XX:+AllowRedefinitionToAddDeleteMethods"
            ]
        }
    }

    test.finalizedBy(project.tasks.jacocoTestReport)

    jacocoTestReport {
        dependsOn test
        reports {
            xml.setRequired true
            xml.setOutputLocation file("${buildDir}/reports/jacoco.xml")
            csv.setRequired false
            html.setOutputLocation file("${buildDir}/reports/jacocoHtml")
        }
    }
}

jacoco {
    toolVersion = "${jacoco_version}"
    reportsDirectory = file("$buildDir/report")
}

tasks.register('jacocoMergedReport', JacocoReport) {
    dependsOn = subprojects.jacocoTestReport
    additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(subprojects.sourceSets.main.output)
    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
    reports {
        xml.setRequired true
        csv.setRequired false
        html.setRequired true
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true'
    ]
}

tasks.named('wrapper') {
    gradleVersion = "${gradle_version}"
}